<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Async on sysid blog</title>
    <link>/blog/async/</link>
    <description>Recent content in Async on sysid blog</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <copyright>Copyright Â© 2022, sysid.</copyright>
    <lastBuildDate>Wed, 27 May 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="/blog/async/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Server Sent Events</title>
      <link>/server-sent-events/</link>
      <pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate>
      <guid>/server-sent-events/</guid>
      <description>&lt;p&gt;If you are looking for &lt;em&gt;realtime&lt;/em&gt; features in WEB applciations&#xA;you often end with &lt;a href=&#34;https://en.wikipedia.org/wiki/WebSocket&#34;&gt;Websockets&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Just to be complete I also mention &amp;lsquo;Long/Short polling&amp;rsquo; as a client-side pull option. I&#xA;regard it as mere workaround to a &lt;em&gt;realtime&lt;/em&gt; communication implementation.&lt;/p&gt;&#xA;&lt;h4 id=&#34;as-always-requirements-are-key&#34;&gt;As always, requirements are key:&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;If you need bi-directional realtime features with high volume and low latency, &lt;a href=&#34;https://en.wikipedia.org/wiki/WebSocket&#34;&gt;Websocket&lt;/a&gt; is your choice.&lt;/li&gt;&#xA;&lt;li&gt;If you need to deliver &lt;em&gt;realtime&lt;/em&gt; information&#xA;to many clients, but you can live with the HTTP Request/Response model to trigger actions, &lt;a href=&#34;https://en.wikipedia.org/wiki/Server-sent_events&#34;&gt;Server Sent Events (SSE)&lt;/a&gt; are a&#xA;powerful contender.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;SSE is a mechanism that allows the server to asynchronously push the data to the client once the client-server connection is established.&#xA;The client &lt;em&gt;subscribes&lt;/em&gt; to the server data via an &lt;a href=&#34;https://www.w3.org/TR/eventsource/&#34;&gt;Event Source&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Munggoggo: A modern message based async agent framework</title>
      <link>/munggoggo-a-modern-message-based-async-agent-framework/</link>
      <pubDate>Sat, 02 Nov 2019 22:12:03 +0000</pubDate>
      <guid>/munggoggo-a-modern-message-based-async-agent-framework/</guid>
      <description>&lt;p&gt;An asyncio based agent platform written in Python and based on RabbitMQ.&lt;/p&gt;&#xA;&lt;p&gt;Agents are isolated processes which can host multiple parallel running behaviours implementing business&#xA;logic and can be deployed as independent kubernetes pods. Access to the agent mesh is via&#xA;REST/HTTP, websocket and jsonrpc.&lt;/p&gt;&#xA;&lt;p&gt;A few lines of code implement a fully fledged agent with a simple behaviour: sending and&#xA;receiving ping messages to/from other agents.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#b06;font-weight:bold&#34;&gt;mode&lt;/span&gt; &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;import&lt;/span&gt; Worker&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#b06;font-weight:bold&#34;&gt;behaviour&lt;/span&gt; &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;import&lt;/span&gt; Behaviour&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#b06;font-weight:bold&#34;&gt;core&lt;/span&gt; &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;import&lt;/span&gt; Core&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#b06;font-weight:bold&#34;&gt;Agent&lt;/span&gt;(Core):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#b06;font-weight:bold&#34;&gt;PingBehav&lt;/span&gt;(Behaviour):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;setup&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self.counter = &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;run&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            self.counter += &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            msg = &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;await&lt;/span&gt; self.receive()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;if&lt;/span&gt; msg:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#038&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#d20;background-color:#fff0f0&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#d20;background-color:#fff0f0&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#33b;background-color:#fff0f0&#34;&gt;{&lt;/span&gt;self.name&lt;span style=&#34;color:#33b;background-color:#fff0f0&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#d20;background-color:#fff0f0&#34;&gt;: Message received: &lt;/span&gt;&lt;span style=&#34;color:#33b;background-color:#fff0f0&#34;&gt;{&lt;/span&gt;msg.body.decode()&lt;span style=&#34;color:#33b;background-color:#fff0f0&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#d20;background-color:#fff0f0&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;await&lt;/span&gt; self.publish(&lt;span style=&#34;color:#038&#34;&gt;str&lt;/span&gt;(self.counter), &lt;span style=&#34;color:#d20;background-color:#fff0f0&#34;&gt;&amp;#39;ping&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;await&lt;/span&gt; asyncio.sleep(&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;0.9&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;setup&lt;/span&gt;(self) -&amp;gt; &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;None&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#d20;background-color:#fff0f0&#34;&gt;&amp;#34;&amp;#34;&amp;#34; Register behaviour and subscribe to &amp;#39;ping&amp;#39; topic &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;await&lt;/span&gt; self.add_runtime_dependency(self.PingBehav(self, binding_keys=[&lt;span style=&#34;color:#d20;background-color:#fff0f0&#34;&gt;&amp;#39;ping&amp;#39;&lt;/span&gt;]))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;if&lt;/span&gt; __name__ == &lt;span style=&#34;color:#d20;background-color:#fff0f0&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Worker(Agent(identity=&lt;span style=&#34;color:#d20;background-color:#fff0f0&#34;&gt;&amp;#39;AgentIdentity&amp;#39;&lt;/span&gt;), loglevel=&lt;span style=&#34;color:#d20;background-color:#fff0f0&#34;&gt;&amp;#34;info&amp;#34;&lt;/span&gt;).execute_from_commandline()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br/&gt;&#xA;&lt;p&gt;Documentation: &lt;a href=&#34;https://munggoggo.readthedocs.io/en/latest/&#34;&gt;https://munggoggo.readthedocs.io/en/latest/&lt;/a&gt;&lt;br&gt;&#xA;Github: &lt;a href=&#34;https://github.com/sysid/munggoggo&#34;&gt;https://github.com/sysid/munggoggo&lt;/a&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
