<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>development on sysid blog</title>
    <link>/blog/development/</link>
    <description>Recent content in development on sysid blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright © 2022, sysid.</copyright>
    <lastBuildDate>Thu, 06 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="/blog/development/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>developer&#39;s learnings</title>
      <link>/developers-learnings/</link>
      <pubDate>Thu, 06 Feb 2025 00:00:00 +0000</pubDate>
      
      <guid>/developers-learnings/</guid>
      <description>Adages collected over time Simple is not given. It takes constant work There is no pride in managing or understanding complexity Typed languages are essential on teams with mixed experience levels Java is a great language because it&amp;rsquo;s boring Frontend development is a nightmare world of Kafkaesque awfulness I no longer enjoy Good management is invaluable. Objects are extremely good at what they&amp;rsquo;re good at. Blind devotion to functional is dumb.</description>
    </item>
    
    <item>
      <title>rsnip</title>
      <link>/rsnip/</link>
      <pubDate>Mon, 06 Jan 2025 00:00:00 +0000</pubDate>
      
      <guid>/rsnip/</guid>
      <description>Fast, Reliable, Yours: Why Snippets Outshine LLMs for boring Tasks While large language models (LLMs) like ChatGPT are revolutionizing workflows with their smart completions and contextual insights, you don’t want to re-research a command or script every time you need it.
Why does a good snippet manager still matter? Even in an age of intelligent assistants, there’s a compelling case for a specialized and fast snippet manager:
Speed: LLMs are slow when it comes to re-fetching familiar snippets.</description>
    </item>
    
  </channel>
</rss>
