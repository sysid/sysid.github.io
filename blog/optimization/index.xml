<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Optimization on sysid blog</title>
    <link>/blog/optimization/</link>
    <description>Recent content in Optimization on sysid blog</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <copyright>Copyright Â© 2022, sysid.</copyright>
    <lastBuildDate>Sat, 13 May 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="/blog/optimization/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linear Optimization in time-critical Control Loop</title>
      <link>/linear-optimization-in-time-critical-control-loop/</link>
      <pubDate>Sat, 13 May 2023 00:00:00 +0000</pubDate>
      <guid>/linear-optimization-in-time-critical-control-loop/</guid>
      <description>&lt;h2 id=&#34;problem&#34;&gt;Problem&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Given a start and endpoint, find the eager and lazy path from start to end.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;figure class=&#34;center&#34;&gt;&lt;img src=&#34;/linear-optimization-in-time-critical-control-loop/eager_lazy_path.png&#34; width=&#34;100%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;h2 id=&#34;model&#34;&gt;Model&lt;/h2&gt;&#xA;&lt;p&gt;The visualization translates to a simple rhombus (German: Raute) where the enclosed area is to be maximized.&lt;/p&gt;&#xA;&lt;p&gt;The task is to find the corner points A, B, C, D, of the Raute.&lt;/p&gt;&#xA;&lt;p&gt;There is a twist, however. The points must be contained within a &amp;ldquo;valid&amp;rdquo; area, whereas&#xA;start and endpoint may lie outside.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Select Points</title>
      <link>/select-points/</link>
      <pubDate>Sun, 30 Apr 2023 00:00:00 +0000</pubDate>
      <guid>/select-points/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;Given multiple sets of data points. Select one point per set so that the distances between the points is minimal.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;figure class=&#34;center&#34;&gt;&lt;img src=&#34;/select-points/full2.png&#34; width=&#34;100%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;h2 id=&#34;model&#34;&gt;Model&lt;/h2&gt;&#xA;&lt;h3 id=&#34;non-convex-miqp-model&#34;&gt;Non-convex MIQP Model&lt;/h3&gt;&#xA;&lt;p&gt;$$&#xA;\min \sum_{i,j| ok_{i,j}} dist_{i,j} \cdot x_i \cdot x_j  \\&#xA;\sum_{i|group_{i,g}} x_i = 1 \forall g \\&#xA;x_i \in {0,1}&#xA;$$&lt;/p&gt;&#xA;&lt;h3 id=&#34;linear-mip-model&#34;&gt;Linear MIP Model&lt;/h3&gt;&#xA;&lt;p&gt;To linearize the model a standard procedure can be applied:&lt;/p&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s introduce a new binary variable, $z_{i,j}$, that represents the product of the binary variables $\color{darkred}x_i$ and $\color{darkred}x_j$.&#xA;This new variable will replace the nonlinear term in the objective function, making the model linear.&#xA;We will also add constraints to link the new variable $z_{i,j}$ with the original variables $\color{darkred}x_i$ and $\color{darkred}x_j$.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Maximal Overlap of Rectangles</title>
      <link>/maximal-overlap-of-rectangles/</link>
      <pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate>
      <guid>/maximal-overlap-of-rectangles/</guid>
      <description>&lt;figure class=&#34;center&#34;&gt;&lt;img src=&#34;/maximal-overlap-of-rectangles/start_pic.png&#34; width=&#34;100%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Find the maximal overlap of rectangles so, that every selected rectangle covers the full width of the overlap area.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;A selected rectangle can be larger than the overlap area, but not smaller.&lt;/p&gt;&#xA;&lt;h3 id=&#34;problem-parameters&#34;&gt;Problem Parameters:&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;a set of rectangles aligned on the x-axis&lt;/li&gt;&#xA;&lt;li&gt;rectanges can have different heigt&lt;/li&gt;&#xA;&lt;li&gt;rectangles show arbitrary overlap&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;model&#34;&gt;Model&lt;/h2&gt;&#xA;&lt;h3 id=&#34;parameters&#34;&gt;Parameters&lt;/h3&gt;&#xA;&lt;p&gt;$$&#xA;i \in [1..N],\ \text{ index: N rectangles }\\&#xA;s_i \in R^+,\ \text{ start of rectangle \(i\) }\\&#xA;e_i \in R^+,\ \text{ end of rectangle \(i\) }\\&#xA;h_i \in R^+,\ \text{ height of rectangle \(i\) }\\&#xA;M \in R^+,\ \text{ Big-M constant, upper limit for x }\\&#xA;$$&lt;/p&gt;</description>
    </item>
    <item>
      <title>Scheduling</title>
      <link>/scheduling/</link>
      <pubDate>Wed, 06 Jan 2021 00:00:00 +0000</pubDate>
      <guid>/scheduling/</guid>
      <description>&lt;p&gt;I already analysed several scheduling problems:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../task-scheduling&#34;&gt;Task Scheduling&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../task-scheduling-with-limited-resources&#34;&gt;Task Scheduling with limited Resources&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../job-shop-scheduling-problem&#34;&gt;Job Shop Scheduling Problem&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../patient-scheduling&#34;&gt;Patient Scheduling&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The class of scheduling problems is interesting and every example provides new insight. Here I am going to look at&#xA;two problems which can be solved with a very similar and quite common approach: The&#xA;&lt;strong&gt;continuous time model&lt;/strong&gt; approach.&lt;/p&gt;&#xA;&lt;h2 id=&#34;problem-1-machine-scheduling&#34;&gt;Problem 1: Machine Scheduling&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Schedule jobs onto available machines so, that the total processing time (a.k.a. makespan) is minimized.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Inventory Management</title>
      <link>/inventory-management/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      <guid>/inventory-management/</guid>
      <description>&lt;figure class=&#34;center&#34;&gt;&lt;img src=&#34;/inventory-management/im.png&#34; width=&#34;100%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Find the best order policy to replenish stock levels, i.e. minimize the total cost incurred.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;The (Q, R) inventory model is as follows:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;If the inventory falls below threshold R, place an order of quantity Q.&lt;/li&gt;&#xA;&lt;li&gt;Lead times: when an order is placed it takes some time to be delivered&lt;/li&gt;&#xA;&lt;li&gt;When inventory becomes zero, additional demand will cause a backlog. Backlogged demand will be fulfilled when replenishments arrive but at a cost.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;cost-contribution&#34;&gt;Cost Contribution&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Fixed ordering cost (Fixed cost)&lt;/li&gt;&#xA;&lt;li&gt;Holding cost related to inventory (Holding cost)&lt;/li&gt;&#xA;&lt;li&gt;Penalties related to backlogs (Shortage cost)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;figure class=&#34;center&#34;&gt;&lt;img src=&#34;/inventory-management/cost_contrib.png&#34; width=&#34;100%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;Choose quantity Q and ordering threshold R to strike a good balance among these three costs!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Job Shop Scheduling Problem</title>
      <link>/job-shop-scheduling-problem/</link>
      <pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/job-shop-scheduling-problem/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;The Job Shop Scheduling Problem (JSSP) is an NP-hard problem. &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;The JSSP is defined by a set of jobs that must be executed by&#xA;a set of machines in a specific order for each job. Each job has a defined execution time for each machine and&#xA;a defined processing order of machines. Also, each job must use each machine only once.&#xA;The machines can only execute a job at a time and once started, the machine cannot be interrupted until the completion of the assigned job.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Resource Constrained Project Success Plan</title>
      <link>/resource-constrained-project-success-plan/</link>
      <pubDate>Sat, 18 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/resource-constrained-project-success-plan/</guid>
      <description>&lt;p&gt;Scheduling tasks in a large project translates to facing a graph optimization challenge:&lt;/p&gt;&#xA;&lt;figure class=&#34;center&#34;&gt;&lt;img src=&#34;/resource-constrained-project-success-plan/network.png&#34; width=&#34;100%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;The Resource-Constrained Project Scheduling Problem is a combinatorial optimization problem that consists of finding&#xA;a feasible scheduling for a set of \(n\) jobs subject to resource and precedence constraints.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;problem-domain-network-optimization&#34;&gt;Problem Domain: Network Optimization.&lt;/h2&gt;&#xA;&lt;p&gt;Taks are represented by nodes. Dependencies of tasks on predecessors form a directed graph. Every task has got a&#xA;duration which is represented by the weight of the directed edges of the graph. Tasks consume limited resources.&#xA;In order to provide an entry and exit point to the graph we introduce two &lt;em&gt;dummy&lt;/em&gt; tasks,&#xA;\(x_0, x_{n+1}\) with duration 0 and no resource consumption (a.k.a. sentinels).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Installing CBC on MacOS</title>
      <link>/installing-cbc-on-macos/</link>
      <pubDate>Wed, 24 Jun 2020 00:00:00 +0000</pubDate>
      <guid>/installing-cbc-on-macos/</guid>
      <description>&lt;h4 id=&#34;update-may-2022-using-the-coinbrew-approach-as-documented-herehttpsgithubcomcoin-orcbcusing-coinbrew-works-now-out-of-the-box&#34;&gt;Update May 2022: Using the coinbrew approach as documented &lt;a href=&#34;https://github.com/coin-or/Cbc#using-coinbrew&#34;&gt;here&lt;/a&gt; works now out of the box.&lt;/h4&gt;&#xA;&lt;p&gt;Today I needed to install &lt;a href=&#34;https://github.com/coin-or/Cbc&#34;&gt;CBC&lt;/a&gt; on MacOS and it was not a walk in the park, unfortunately.&lt;/p&gt;&#xA;&lt;p&gt;Yes, there is a &lt;em&gt;brew&lt;/em&gt; package which makes installation trivial. However, this only installs a single-threaded version&#xA;of CBC. Not good!&lt;/p&gt;&#xA;&lt;p&gt;One of the greatest selling points of CBC is multithreading. This makes CBC a contender for serious optimization&#xA;tasks in MIP programming.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dispersion</title>
      <link>/dispersion/</link>
      <pubDate>Sun, 21 Jun 2020 00:00:00 +0000</pubDate>
      <guid>/dispersion/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;Find 10 points out of 50 with maximum distance from each other.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;figure class=&#34;center&#34;&gt;&lt;img src=&#34;/dispersion/points.png&#34; width=&#34;100%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;This problem can modelled as a &lt;strong&gt;max-min&lt;/strong&gt; model where we maximize the smallest distance of 10 points.&lt;/p&gt;&#xA;&lt;h2 id=&#34;model&#34;&gt;Model&lt;/h2&gt;&#xA;&lt;p&gt;$$&#xA;\max \Delta\\&#xA;s.t.\\&#xA;\Delta \le d_{i,j} + M(1- x_i x_j), \forall i \lt j \\&#xA;\sum_i x_i = k\\&#xA;x_i \in {0,1}\\&#xA;$$&lt;/p&gt;&#xA;&lt;p&gt;M is an upper bound on the distances:&#xA;$$&#xA;M = \max_{i\le j} d_{i,j}\\&#xA;$$&lt;/p&gt;&#xA;&lt;p&gt;The quadratic part \(x_i x_j\) of the constraint can be linearized:&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Book of Mormon II</title>
      <link>/the-book-of-mormon-ii/</link>
      <pubDate>Sat, 13 Jun 2020 00:00:00 +0000</pubDate>
      <guid>/the-book-of-mormon-ii/</guid>
      <description>&lt;p&gt;The full version of the problem you can find in &lt;a href=&#34;../the-book-of-mormon&#34;&gt;part I of the article&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;recap-challenge&#34;&gt;Recap Challenge&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;We want to read the book in a given number of days: 128.&lt;/li&gt;&#xA;&lt;li&gt;We want to read an integer number of chapters each day (there are more chapters than days), and at least 1 chapter each day.&lt;/li&gt;&#xA;&lt;li&gt;The chapters are very non uniform in length (some very short, a few very long, many in between) so we would like&#xA;to come up with a reading schedule that minimizes the variance of the length of the days readings&#xA;(read multiple short chapters on the same day, long chapters are the only one read that day).&lt;/li&gt;&#xA;&lt;li&gt;We want to read through the book in order (no skipping ahead to combine short chapters that are not naturally next to each other)&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;objective&#34;&gt;Objective:&lt;/h3&gt;&#xA;&lt;p&gt;We minimize the variance of the number of verses read per day.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Book of Mormon</title>
      <link>/the-book-of-mormon/</link>
      <pubDate>Sun, 07 Jun 2020 00:00:00 +0000</pubDate>
      <guid>/the-book-of-mormon/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;The Book of Mormon is a sacred text of the Latter Day Saint movement, which, according to adherents, contains writings&#xA;of ancient prophets who lived on the American continent from approximately 2200 BC to AD 421.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Not the easiest matter, so we need a smart reading plan.&lt;/p&gt;&#xA;&lt;h2 id=&#34;challenge&#34;&gt;Challenge&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;We want to read the book in a given number of days: 128.&lt;/li&gt;&#xA;&lt;li&gt;We want to read an integer number of chapters each day (there are more chapters than days), and at least 1 chapter each day.&lt;/li&gt;&#xA;&lt;li&gt;The chapters are very non uniform in length (some very short, a few very long, many in between) so we would like&#xA;to come up with a reading schedule that minimizes the variance of the length of the days readings&#xA;(read multiple short chapters on the same day, long chapters are the only one read that day).&lt;/li&gt;&#xA;&lt;li&gt;We want to read through the book in order (no skipping ahead to combine short chapters that are not naturally next to each other)&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://yetanothermathprogrammingconsultant.blogspot.com/2018/02/on-scheduling-of-reading-book-chapters.html&#34;&gt;Yet Another Math Programming Consultant&lt;/a&gt;&#xA;analysed various solution approaches. I want to replicate here two of them with &lt;a href=&#34;http://www.pyomo.org/&#34;&gt;Pyomo&lt;/a&gt; as modelling language.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Numberlink Puzzle</title>
      <link>/numberlink-puzzle/</link>
      <pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate>
      <guid>/numberlink-puzzle/</guid>
      <description>&lt;figure class=&#34;center&#34;&gt;&lt;img src=&#34;/numberlink-puzzle/mynumberlink.png&#34; width=&#34;100%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;h2 id=&#34;problem&#34;&gt;Problem&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Connect each two cells with the same numbers by a line.&lt;/li&gt;&#xA;&lt;li&gt;The sections of a line run horizontally or vertically.&lt;/li&gt;&#xA;&lt;li&gt;Each cell must be visited exactly once by a line.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;figure class=&#34;center&#34;&gt;&lt;img src=&#34;/numberlink-puzzle/numberlink.png&#34; width=&#34;100%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;The trick is to identify endpoints of numberlinks. They do have only one neighbor with the same value. Cells wich are part of a&#xA;path must have two neighbors with the same value.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;figure class=&#34;center&#34;&gt;&lt;img src=&#34;/numberlink-puzzle/endpoints.png&#34; width=&#34;100%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;The challenge is now to encode this insight into a Mixed Integer Programming model and fire up a solver.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Task Scheduling with limited Resources</title>
      <link>/task-scheduling-with-limited-resources/</link>
      <pubDate>Sun, 24 May 2020 00:00:00 +0000</pubDate>
      <guid>/task-scheduling-with-limited-resources/</guid>
      <description>&lt;p&gt;We already looked at a simple scheduling problem: &lt;a href=&#34;../task-scheduling&#34;&gt;Task Scheduling&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Here we are looking at a more elaborated scheduling example with limited resources for tasks with various durations.&#xA;We want to get insights by re-engineering the solution of &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; with &lt;a href=&#34;http://www.pyomo.org/&#34;&gt;Pyomo&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h3 id=&#34;problem&#34;&gt;Problem&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;We have \(N\) tasks and \(M\) facilities to execute the tasks.&lt;/li&gt;&#xA;&lt;li&gt;Every task has a due date.&lt;/li&gt;&#xA;&lt;li&gt;Tasks require certain resources for execution, e.g. water, electricity, &amp;hellip;&lt;/li&gt;&#xA;&lt;li&gt;Every facility provides a set of resources&lt;/li&gt;&#xA;&lt;li&gt;Only one task per resource can be executed at a given time.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Assign the tasks to the facilities so that the task get all required resources for execution.&#xA;We want to minimize the total time to complete all tasks. This time is called &lt;em&gt;makespan&lt;/em&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Task Scheduling</title>
      <link>/task-scheduling/</link>
      <pubDate>Sat, 23 May 2020 00:00:00 +0000</pubDate>
      <guid>/task-scheduling/</guid>
      <description>&lt;p&gt;We already looked at a real world scheduling problem: &lt;a href=&#34;../patient-scheduling&#34;&gt;Patient Scheduling&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Important concepts have been touched there. Here we look at additional aspects of this important&#xA;optimization domain, especially in using &lt;a href=&#34;http://www.pyomo.org/&#34;&gt;Pyomo&lt;/a&gt; as modelling environment.&lt;/p&gt;&#xA;&lt;h2 id=&#34;simple-scheduling&#34;&gt;Simple Scheduling&lt;/h2&gt;&#xA;&lt;h3 id=&#34;problem&#34;&gt;Problem&lt;/h3&gt;&#xA;&lt;p&gt;Schedule 10 tasks. Each task must be assigned to a single time slot, however, not every time slot is viable.&#xA;The duration of a task is one timeslot.&#xA;We want to minimize the number of timeslots used.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Polyominos, Tetris</title>
      <link>/polyominos-tetris/</link>
      <pubDate>Sun, 17 May 2020 00:00:00 +0000</pubDate>
      <guid>/polyominos-tetris/</guid>
      <description>&lt;figure class=&#34;center&#34;&gt;&lt;img src=&#34;/polyominos-tetris/pentominoes.png&#34; width=&#34;100%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;h2 id=&#34;problem&#34;&gt;Problem&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Fill a rectangle with polyominos.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Polyomino&#34;&gt;What is a Polyomino?&lt;/a&gt;&lt;br&gt;&#xA;A plane geometric figure formed by joining one or more equal squares edge to edge.&#xA;It is a polyform whose cells are squares. It may be regarded as a finite subset of the regular square tiling.&lt;/p&gt;&#xA;&lt;h1 id=&#34;model&#34;&gt;Model&lt;/h1&gt;&#xA;&lt;p&gt;Since this puzzle is just another form of tiling challenge we can reuse concepts and ideas from&#xA;&lt;a href=&#34;../mondriaan-puzzle&#34;&gt;Mondriaan Puzzle&lt;/a&gt;, &lt;a href=&#34;../square-tiling&#34;&gt;Another Boring Lockdown Day&lt;/a&gt; and &lt;a href=&#34;../patient-scheduling&#34;&gt;Patient Scheduling&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Patient Scheduling</title>
      <link>/patient-scheduling/</link>
      <pubDate>Sat, 09 May 2020 00:00:00 +0000</pubDate>
      <guid>/patient-scheduling/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;How to optimize the scheduling of patients in order to use the necessary infrastructure, i.e. infusion chairs optimally.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;problem-parameters-1&#34;&gt;Problem Parameters &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;There are \(T = 40\) time slots of 15 minutes&lt;/li&gt;&#xA;&lt;li&gt;We have 23 infusion chairs for patient treatment&lt;/li&gt;&#xA;&lt;li&gt;We have 8 different types of patients&lt;/li&gt;&#xA;&lt;li&gt;Each patient type has a demand (number of patients) and treatment length (expressed in 15 minute slots)&lt;/li&gt;&#xA;&lt;li&gt;No treatments can start during lunch break&lt;/li&gt;&#xA;&lt;li&gt;At most 2 treatments can start in each time slot.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;figure class=&#34;center&#34;&gt;&lt;img src=&#34;/patient-scheduling/patient_data.png&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://yetanothermathprogrammingconsultant.blogspot.com/2018/07/scheduling-of-patients.html&#34;&gt;Yet Another Mathprogramming Consultant&lt;/a&gt;&#xA;provides a comprehensive treatment of the problem. Here I will focus on a Mixed Integer Programming &amp;lsquo;grid approach&amp;rsquo;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Square Tiling</title>
      <link>/square-tiling/</link>
      <pubDate>Sat, 02 May 2020 00:00:00 +0000</pubDate>
      <guid>/square-tiling/</guid>
      <description>&lt;figure class=&#34;center&#34;&gt;&lt;img src=&#34;/square-tiling/5_5.png&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Given an inventory of square tiles, what is the maximum square space we can fill with them?&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;The picture above consists of the following set of tiles:&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;length&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;1&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;2&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;3&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;count&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;4&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;3&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;2&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;8 out of the 9 given tiles can be used to form the resulting (5x5) square. One (3x3) tile cannot be used.&#xA;With the given set this is the larges square area we can fill.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mondriaan Puzzle</title>
      <link>/mondriaan-puzzle/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate>
      <guid>/mondriaan-puzzle/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;Partition an \(n \times n\) square into multiple non-congruent integer-sided rectangles.&lt;/li&gt;&#xA;&lt;li&gt;The rectangles must be &lt;strong&gt;non-congruent&lt;/strong&gt; and the side length must be an &lt;strong&gt;integer&lt;/strong&gt; number.&lt;/li&gt;&#xA;&lt;li&gt;Find the &lt;strong&gt;least possible length difference&lt;/strong&gt; between the largest and smallest used rectangle, i.e. make the&#xA;rectangles as similar as possible.&lt;/li&gt;&#xA;&lt;li&gt;Every rectangle can only be used &lt;strong&gt;once&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;There is related work covering multiple aspects of the problem and its solution. Here we focus on&#xA;a Mixed Integer Programming approach.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sudoku</title>
      <link>/sudoku/</link>
      <pubDate>Sun, 26 Apr 2020 00:00:00 +0000</pubDate>
      <guid>/sudoku/</guid>
      <description>&lt;figure class=&#34;center&#34;&gt;&lt;img src=&#34;/sudoku/solution.png&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Sudoku&#34;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;a logic-based, combinatorial number-placement puzzle.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Fill a 9Ã9 grid with digits so that each column, each row, and each of the nine 3Ã3 subgrids&#xA;that compose the grid contain all of the digits from 1 to 9.&lt;/p&gt;&#xA;&lt;p&gt;The puzzle setter provides a partially completed grid, which for a well-posed puzzle has a single solution.&lt;/p&gt;&#xA;&lt;h2 id=&#34;challenges&#34;&gt;Challenges&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Understand the problem (easy)&lt;/li&gt;&#xA;&lt;li&gt;Design the index sets (medium)&lt;/li&gt;&#xA;&lt;li&gt;Translate the model into Pyomo (easy)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;tooling&#34;&gt;Tooling&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.pyomo.org/&#34;&gt;Pyomo&lt;/a&gt; as LP modelling language&lt;/li&gt;&#xA;&lt;li&gt;Optimizer: &lt;a href=&#34;https://projects.coin-or.org/Cbc&#34;&gt;CBC&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Python&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;model&#34;&gt;Model&lt;/h1&gt;&#xA;&lt;h2 id=&#34;indexing-schema&#34;&gt;Indexing Schema&lt;/h2&gt;&#xA;&lt;figure class=&#34;center&#34;&gt;&lt;img src=&#34;/sudoku/sudoku.png&#34; width=&#34;100%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;h2 id=&#34;variables&#34;&gt;Variables&lt;/h2&gt;&#xA;&lt;p&gt;$$&#xA;y^m_{i,j;k} =&#xA;\begin{cases}&#xA;1, \ \text{ when cell \((i,j;k)\) contains number \(m\) }\\&#xA;0, \ \text{ else }\\&#xA;\end{cases}&#xA;$$&lt;/p&gt;</description>
    </item>
    <item>
      <title>Longest Path Journey</title>
      <link>/longest-path-journey/</link>
      <pubDate>Sat, 25 Apr 2020 00:00:00 +0000</pubDate>
      <guid>/longest-path-journey/</guid>
      <description>&lt;figure class=&#34;center&#34;&gt;&lt;img src=&#34;/longest-path-journey/graph.png&#34; width=&#34;100%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;Normally you would be searching for the shortest path from A to B. At least this is what navigation systems&#xA;do. But here we want to look at the opposite problem:&lt;/p&gt;&#xA;&lt;h3 id=&#34;what-is-the-longest-possible-path-to-get-from-a-to-b&#34;&gt;What is the longest possible path to get from A to B?&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Longest_path_problem&#34;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;The longest path problem is the problem of finding a simple path of maximum length in a given graph.&#xA;In contrast to the shortest path problem, which can be solved in polynomial time in graphs without&#xA;negative-weight cycles, the longest path problem is NP-hard.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Finding the way with TSP</title>
      <link>/finding-the-way-with-tsp/</link>
      <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
      <guid>/finding-the-way-with-tsp/</guid>
      <description>&lt;div className={styles.Document}&gt;&#xA;&lt;p&gt;&lt;figure class=&#34;center&#34;&gt;&lt;img src=&#34;/finding-the-way-with-tsp/munggoggo.1000.color.svg&#34; width=&#34;100%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;small&gt;&lt;small&gt;Reading time is a bug due to size of embedded SVG images.&lt;/small&gt;&lt;/small&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;travelling-salesman-tsp-art-in-python&#34;&gt;Travelling Salesman (TSP) Art in Python&lt;/h2&gt;&#xA;&lt;p&gt;There is already a lot of existing work on this topic &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, but especially the book from Robert Bosch &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; inspired me to embark on my own&#xA;journey.&lt;/p&gt;&#xA;&lt;p&gt;It became an rewarding and entertaining melange of &amp;ldquo;Mathematical Optimization&amp;rdquo; and playful programming while exploring new concepts and&#xA;building a basic theoretical foundation for one of the most famous problems in mathematical optimization.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linear Programming for Dummies 4</title>
      <link>/linear-programming-for-dummies-4/</link>
      <pubDate>Tue, 14 Apr 2020 00:00:00 +0000</pubDate>
      <guid>/linear-programming-for-dummies-4/</guid>
      <description>&lt;p&gt;This is a collection of logic recipies for Mixed Integer Programming.&#xA;It builds on &lt;a href=&#34;../linear-programming-for-dummies-3/&#34;&gt;Part3&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;It is based on personal learning experience and focuses on application rather than theory.&#xA;For a rigorous approach please refer to a textbook.&lt;/p&gt;&#xA;&lt;h2 id=&#34;logic-recipies&#34;&gt;Logic Recipies&lt;/h2&gt;&#xA;&lt;p&gt;All variables here can only take boolean values: \(x_i, y \in{0, 1}\)&lt;br&gt;&#xA;Let \(X_i\) stand for the proposition \(x_i=1\), anaolog for \(Y\).&lt;/p&gt;&#xA;&lt;h3 id=&#34;if-x-then-y&#34;&gt;if X then Y&lt;/h3&gt;&#xA;&lt;p&gt;$$&#xA;x \rightarrow y&#xA;$$&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linear Programming for Dummies 3</title>
      <link>/linear-programming-for-dummies-3/</link>
      <pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate>
      <guid>/linear-programming-for-dummies-3/</guid>
      <description>&lt;p&gt;This is a primer on Mixed Integer Programming.&#xA;It builds on &lt;a href=&#34;../linear-programming-for-dummies-2/&#34;&gt;Part2&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;It is based on personal learning experience and focuses on application rather than theory.&#xA;For a rigorous approach please refer to a textbook.&lt;/p&gt;&#xA;&lt;h2 id=&#34;connect-decision-variable-with-boolean-variable&#34;&gt;Connect decision variable with boolean variable&lt;/h2&gt;&#xA;&lt;p&gt;From &lt;a href=&#34;../linear-programming-for-dummies-2&#34;&gt;Part2&lt;/a&gt; it is known that the fundamental technique to link continuous decision variables with&#xA;indicator/boolean variables is via Big-M/Small-m constraints.&lt;/p&gt;&#xA;&lt;p&gt;They implement the following logical statement:&#xA;$$&#xA;\delta = 1 \Leftrightarrow x \gt 0 \tag{0}&#xA;$$&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linear Programming for Dummies 2</title>
      <link>/linear-programming-for-dummies-2/</link>
      <pubDate>Sun, 12 Apr 2020 00:00:00 +0000</pubDate>
      <guid>/linear-programming-for-dummies-2/</guid>
      <description>&lt;p&gt;This is a primer on Mixed Integer Programming.&lt;br&gt;&#xA;It builds on &lt;a href=&#34;../linear-programming-for-dummies-1&#34;&gt;Part1&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;It is based on personal learning experience and focuses on application rather than theory.&#xA;For a rigorous approach please refer to a textbook.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Integer_programming&#34;&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;An integer programming problem is a mathematical optimization or feasibility program in which some or all of the variables are restricted to be integers.&#xA;In contrast to linear programming, which can be solved efficiently in the worst case, integer programming&#xA;problems are in many practical situations (those with bounded variables) NP-hard.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Optimized Car Rental</title>
      <link>/optimized-car-rental/</link>
      <pubDate>Sat, 11 Apr 2020 00:00:00 +0000</pubDate>
      <guid>/optimized-car-rental/</guid>
      <description>&lt;p&gt;Modelling a car rental company with medium complexity or how to make 120k â¬ per week.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;&#xA;&lt;p&gt;If you need a primer on Linear Programming: &lt;a href=&#34;../lp_for_dummies&#34;&gt;Linear Programming for Dummies 1&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;tools-employed&#34;&gt;Tools employed:&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Linear programming&lt;/li&gt;&#xA;&lt;li&gt;Python&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.pyomo.org/&#34;&gt;Pyomo&lt;/a&gt; as LP modelling language&lt;/li&gt;&#xA;&lt;li&gt;Optimizer: &lt;a href=&#34;https://projects.coin-or.org/Cbc&#34;&gt;CBC&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;company-model&#34;&gt;Company model&lt;/h3&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s assume a car rental company with 4 locations and business hours from Monday to Saturday.&lt;/p&gt;&#xA;&lt;p&gt;The rental car demand estimate is:&lt;/p&gt;&#xA;&lt;figure class=&#34;center&#34;&gt;&lt;img src=&#34;/optimized-car-rental/demand.png&#34; width=&#34;100%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;Cars can be rented for 1, 2 or 3 days and can be returned to either the depot from which rented or another depot at the start of the next morning.&#xA;A 3-day rental on Friday means that the car has to be returned on Tuesday morning because Sunday is closed.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linear Programming for Dummies 1</title>
      <link>/linear-programming-for-dummies-1/</link>
      <pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate>
      <guid>/linear-programming-for-dummies-1/</guid>
      <description>&lt;p&gt;This is a primer on Linear Programming.&lt;/p&gt;&#xA;&lt;p&gt;It is based on personal learning experience and focuses on application rather than theory.&#xA;For a rigorous approach please refer to a textbook.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Linear_programming&#34;&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Linear programming (LP, also called linear optimization) is a method to achieve the best outcome&#xA;(such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships.&#xA;Linear programming is a special case of mathematical programming (also known as mathematical optimization).&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
