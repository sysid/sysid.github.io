<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pyomo on sysid blog</title>
    <link>/blog/pyomo/</link>
    <description>Recent content in pyomo on sysid blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright Â© 2022, sysid.</copyright>
    <lastBuildDate>Sat, 13 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="/blog/pyomo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linear Optimization in time-critical Control Loop</title>
      <link>/linear-optimization-in-time-critical-control-loop/</link>
      <pubDate>Sat, 13 May 2023 00:00:00 +0000</pubDate>
      
      <guid>/linear-optimization-in-time-critical-control-loop/</guid>
      <description>Problem Given a start and endpoint, find the eager and lazy path from start to end.
Model The visualization translates to a simple rhombus (German: Raute) where the enclosed area is to be maximized.
The task is to find the corner points A, B, C, D, of the Raute.
There is a twist, however. The points must be contained within a &amp;ldquo;valid&amp;rdquo; area, whereas start and endpoint may lie outside.</description>
    </item>
    
    <item>
      <title>Select Points</title>
      <link>/select-points/</link>
      <pubDate>Sun, 30 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>/select-points/</guid>
      <description>Given multiple sets of data points. Select one point per set so that the distances between the points is minimal.1
Model Non-convex MIQP Model $$ \min \sum_{i,j| ok_{i,j}} dist_{i,j} \cdot x_i \cdot x_j \\ \sum_{i|group_{i,g}} x_i = 1 \forall g \\ x_i \in {0,1} $$
Linear MIP Model To linearize the model a standard procedure can be applied:
Let&amp;rsquo;s introduce a new binary variable, $z_{i,j}$, that represents the product of the binary variables $\color{darkred}x_i$ and $\color{darkred}x_j$.</description>
    </item>
    
    <item>
      <title>Maximal Overlap of Rectangles</title>
      <link>/maximal-overlap-of-rectangles/</link>
      <pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/maximal-overlap-of-rectangles/</guid>
      <description>Find the maximal overlap of rectangles so, that every selected rectangle covers the full width of the overlap area.
A selected rectangle can be larger than the overlap area, but not smaller.
Problem Parameters: a set of rectangles aligned on the x-axis rectanges can have different heigt rectangles show arbitrary overlap Model Parameters $$ i \in [1..N],\ \text{ index: N rectangles }\\ s_i \in R^+,\ \text{ start of rectangle \(i\) }\\ e_i \in R^+,\ \text{ end of rectangle \(i\) }\\ h_i \in R^+,\ \text{ height of rectangle \(i\) }\\ M \in R^+,\ \text{ Big-M constant, upper limit for x }\\ $$</description>
    </item>
    
    <item>
      <title>Scheduling</title>
      <link>/scheduling/</link>
      <pubDate>Wed, 06 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/scheduling/</guid>
      <description>I already analysed several scheduling problems:
Task Scheduling Task Scheduling with limited Resources Job Shop Scheduling Problem Patient Scheduling The class of scheduling problems is interesting and every example provides new insight. Here I am going to look at two problems which can be solved with a very similar and quite common approach: The continuous time model approach.
Problem 1: Machine Scheduling Schedule jobs onto available machines so, that the total processing time (a.</description>
    </item>
    
    <item>
      <title>Inventory Management</title>
      <link>/inventory-management/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/inventory-management/</guid>
      <description>Find the best order policy to replenish stock levels, i.e. minimize the total cost incurred.
The (Q, R) inventory model is as follows:
If the inventory falls below threshold R, place an order of quantity Q. Lead times: when an order is placed it takes some time to be delivered When inventory becomes zero, additional demand will cause a backlog. Backlogged demand will be fulfilled when replenishments arrive but at a cost.</description>
    </item>
    
    <item>
      <title>Job Shop Scheduling Problem</title>
      <link>/job-shop-scheduling-problem/</link>
      <pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/job-shop-scheduling-problem/</guid>
      <description>The Job Shop Scheduling Problem (JSSP) is an NP-hard problem. 1
The JSSP is defined by a set of jobs that must be executed by a set of machines in a specific order for each job. Each job has a defined execution time for each machine and a defined processing order of machines. Also, each job must use each machine only once. The machines can only execute a job at a time and once started, the machine cannot be interrupted until the completion of the assigned job.</description>
    </item>
    
    <item>
      <title>Resource Constrained Project Success Plan</title>
      <link>/resource-constrained-project-success-plan/</link>
      <pubDate>Sat, 18 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/resource-constrained-project-success-plan/</guid>
      <description>Scheduling tasks in a large project translates to facing a graph optimization challenge:
The Resource-Constrained Project Scheduling Problem is a combinatorial optimization problem that consists of finding a feasible scheduling for a set of \(n\) jobs subject to resource and precedence constraints.
Problem Domain: Network Optimization. Taks are represented by nodes. Dependencies of tasks on predecessors form a directed graph. Every task has got a duration which is represented by the weight of the directed edges of the graph.</description>
    </item>
    
    <item>
      <title>Dispersion</title>
      <link>/dispersion/</link>
      <pubDate>Sun, 21 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/dispersion/</guid>
      <description>Find 10 points out of 50 with maximum distance from each other.1
This problem can modelled as a max-min model where we maximize the smallest distance of 10 points.
Model $$ \max \Delta\\ s.t.\\ \Delta \le d_{i,j} + M(1- x_i x_j), \forall i \lt j \\ \sum_i x_i = k\\ x_i \in {0,1}\\ $$
M is an upper bound on the distances: $$ M = \max_{i\le j} d_{i,j}\\ $$</description>
    </item>
    
    <item>
      <title>The Book of Mormon II</title>
      <link>/the-book-of-mormon-ii/</link>
      <pubDate>Sat, 13 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/the-book-of-mormon-ii/</guid>
      <description>The full version of the problem you can find in part I of the article.
Recap Challenge We want to read the book in a given number of days: 128. We want to read an integer number of chapters each day (there are more chapters than days), and at least 1 chapter each day. The chapters are very non uniform in length (some very short, a few very long, many in between) so we would like to come up with a reading schedule that minimizes the variance of the length of the days readings (read multiple short chapters on the same day, long chapters are the only one read that day).</description>
    </item>
    
    <item>
      <title>The Book of Mormon</title>
      <link>/the-book-of-mormon/</link>
      <pubDate>Sun, 07 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/the-book-of-mormon/</guid>
      <description>The Book of Mormon is a sacred text of the Latter Day Saint movement, which, according to adherents, contains writings of ancient prophets who lived on the American continent from approximately 2200 BC to AD 421.1
Not the easiest matter, so we need a smart reading plan.
Challenge We want to read the book in a given number of days: 128. We want to read an integer number of chapters each day (there are more chapters than days), and at least 1 chapter each day.</description>
    </item>
    
    <item>
      <title>Numberlink Puzzle</title>
      <link>/numberlink-puzzle/</link>
      <pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/numberlink-puzzle/</guid>
      <description>Problem Connect each two cells with the same numbers by a line. The sections of a line run horizontally or vertically. Each cell must be visited exactly once by a line. Solution The trick is to identify endpoints of numberlinks. They do have only one neighbor with the same value. Cells wich are part of a path must have two neighbors with the same value.
The challenge is now to encode this insight into a Mixed Integer Programming model and fire up a solver.</description>
    </item>
    
    <item>
      <title>Task Scheduling with limited Resources</title>
      <link>/task-scheduling-with-limited-resources/</link>
      <pubDate>Sun, 24 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/task-scheduling-with-limited-resources/</guid>
      <description>We already looked at a simple scheduling problem: Task Scheduling.
Here we are looking at a more elaborated scheduling example with limited resources for tasks with various durations. We want to get insights by re-engineering the solution of 1 with Pyomo.
Problem We have \(N\) tasks and \(M\) facilities to execute the tasks. Every task has a due date. Tasks require certain resources for execution, e.g. water, electricity, &amp;hellip; Every facility provides a set of resources Only one task per resource can be executed at a given time.</description>
    </item>
    
    <item>
      <title>Task Scheduling</title>
      <link>/task-scheduling/</link>
      <pubDate>Sat, 23 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/task-scheduling/</guid>
      <description>We already looked at a real world scheduling problem: Patient Scheduling.
Important concepts have been touched there. Here we look at additional aspects of this important optimization domain, especially in using Pyomo as modelling environment.
Simple Scheduling Problem Schedule 10 tasks. Each task must be assigned to a single time slot, however, not every time slot is viable. The duration of a task is one timeslot. We want to minimize the number of timeslots used.</description>
    </item>
    
    <item>
      <title>Polyominos, Tetris</title>
      <link>/polyominos-tetris/</link>
      <pubDate>Sun, 17 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/polyominos-tetris/</guid>
      <description>Problem Fill a rectangle with polyominos.
What is a Polyomino?
A plane geometric figure formed by joining one or more equal squares edge to edge. It is a polyform whose cells are squares. It may be regarded as a finite subset of the regular square tiling.
Model Since this puzzle is just another form of tiling challenge we can reuse concepts and ideas from Mondriaan Puzzle, Another Boring Lockdown Day and Patient Scheduling.</description>
    </item>
    
    <item>
      <title>Patient Scheduling</title>
      <link>/patient-scheduling/</link>
      <pubDate>Sat, 09 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/patient-scheduling/</guid>
      <description>How to optimize the scheduling of patients in order to use the necessary infrastructure, i.e. infusion chairs optimally.
Problem Parameters 1: There are \(T = 40\) time slots of 15 minutes We have 23 infusion chairs for patient treatment We have 8 different types of patients Each patient type has a demand (number of patients) and treatment length (expressed in 15 minute slots) No treatments can start during lunch break At most 2 treatments can start in each time slot.</description>
    </item>
    
    <item>
      <title>Square Tiling</title>
      <link>/square-tiling/</link>
      <pubDate>Sat, 02 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/square-tiling/</guid>
      <description>Given an inventory of square tiles, what is the maximum square space we can fill with them?
The picture above consists of the following set of tiles:
length 1 2 3 count 4 3 2 8 out of the 9 given tiles can be used to form the resulting (5x5) square. One (3x3) tile cannot be used. With the given set this is the larges square area we can fill.</description>
    </item>
    
    <item>
      <title>Mondriaan Puzzle</title>
      <link>/mondriaan-puzzle/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/mondriaan-puzzle/</guid>
      <description>Partition an \(n \times n\) square into multiple non-congruent integer-sided rectangles. The rectangles must be non-congruent and the side length must be an integer number. Find the least possible length difference between the largest and smallest used rectangle, i.e. make the rectangles as similar as possible. Every rectangle can only be used once. There is related work covering multiple aspects of the problem and its solution. Here we focus on a Mixed Integer Programming approach.</description>
    </item>
    
    <item>
      <title>Sudoku</title>
      <link>/sudoku/</link>
      <pubDate>Sun, 26 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/sudoku/</guid>
      <description>Wikipedia
a logic-based, combinatorial number-placement puzzle.
Fill a 9Ã9 grid with digits so that each column, each row, and each of the nine 3Ã3 subgrids that compose the grid contain all of the digits from 1 to 9.
The puzzle setter provides a partially completed grid, which for a well-posed puzzle has a single solution.
Challenges Understand the problem (easy) Design the index sets (medium) Translate the model into Pyomo (easy) Tooling Pyomo as LP modelling language Optimizer: CBC Python Model Indexing Schema Variables $$ y^m_{i,j;k} = \begin{cases} 1, \ \text{ when cell \((i,j;k)\) contains number \(m\) }\\ 0, \ \text{ else }\\ \end{cases} $$</description>
    </item>
    
    <item>
      <title>Longest Path Journey</title>
      <link>/longest-path-journey/</link>
      <pubDate>Sat, 25 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/longest-path-journey/</guid>
      <description>Normally you would be searching for the shortest path from A to B. At least this is what navigation systems do. But here we want to look at the opposite problem:
What is the longest possible path to get from A to B? Wikipedia
The longest path problem is the problem of finding a simple path of maximum length in a given graph. In contrast to the shortest path problem, which can be solved in polynomial time in graphs without negative-weight cycles, the longest path problem is NP-hard.</description>
    </item>
    
    <item>
      <title>Optimized Car Rental</title>
      <link>/optimized-car-rental/</link>
      <pubDate>Sat, 11 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/optimized-car-rental/</guid>
      <description>Modelling a car rental company with medium complexity or how to make 120k â¬ per week.1
If you need a primer on Linear Programming: Linear Programming for Dummies 1
Tools employed: Linear programming Python Pyomo as LP modelling language Optimizer: CBC Company model Let&amp;rsquo;s assume a car rental company with 4 locations and business hours from Monday to Saturday.
The rental car demand estimate is:
Cars can be rented for 1, 2 or 3 days and can be returned to either the depot from which rented or another depot at the start of the next morning.</description>
    </item>
    
  </channel>
</rss>
