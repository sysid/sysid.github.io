<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rust on sysid blog</title>
    <link>/blog/rust/</link>
    <description>Recent content in rust on sysid blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright Â© 2022, sysid.</copyright>
    <lastBuildDate>Sat, 13 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="/blog/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linear Optimization in time-critical Control Loop</title>
      <link>/linear-optimization-in-time-critical-control-loop/</link>
      <pubDate>Sat, 13 May 2023 00:00:00 +0000</pubDate>
      
      <guid>/linear-optimization-in-time-critical-control-loop/</guid>
      <description>Problem Given a start and endpoint, find the eager and lazy path from start to end.
Model The visualization translates to a simple rhombus (German: Raute) where the enclosed area is to be maximized.
The task is to find the corner points A, B, C, D, of the Raute.
There is a twist, however. The points must be contained within a &amp;ldquo;valid&amp;rdquo; area, whereas start and endpoint may lie outside.</description>
    </item>
    
    <item>
      <title>bkmr</title>
      <link>/bkmr/</link>
      <pubDate>Sat, 14 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>/bkmr/</guid>
      <description>Super fast CLI Bookmark Manager and Launcher
Developer Productivity in Rust vs Python I am aware that this is a complex subject and impossible to treat objectively, especially given my time limit of 3 weeks.
In order to compare apples with apples I decided to re-implement a Python productivity application in Rust, which I use on a daily basis:
CLI bookmark manager with fulltext search capability: twbm.
Objectives: Learn Rust and it&amp;rsquo;s idioms Get an idea of developer productivity in Rust vs Python Get an understanding of Rust&amp;rsquo;s capabilities and ecosystem Better performance for a frequently used CLI tool Approach: 1-to-1 translation of Python CLI bookmark manager twbm to Rust.</description>
    </item>
    
  </channel>
</rss>
