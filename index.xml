<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sysid blog</title>
    <link>/</link>
    <description>Recent content on sysid blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright © 2022, sysid.</copyright>
    <lastBuildDate>Mon, 26 Dec 2022 08:25:13 +0100</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reboot</title>
      <link>/reboot/</link>
      <pubDate>Mon, 26 Dec 2022 08:25:13 +0100</pubDate>
      
      <guid>/reboot/</guid>
      <description>Success is not always a straight line.
Blog Requirements readability, no noise professional math support, i.e. Latex rendering swift build times robust technology Switch to Gatsby End of 2018 I switched from Hugo to Gatsby because why not. Gatsby was the new-kid-on-the-block and it is based on React and GraphQL, which I wanted to learn anyway. At the time I could tick above boxes, especially because my blog was tiny and I was dealing with React in other projects.</description>
    </item>
    
    <item>
      <title>vimania-uri</title>
      <link>/vimania-uri/</link>
      <pubDate>Mon, 19 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>/vimania-uri/</guid>
      <description>Double-click open. But for VIM.
Key Features Open URIs, html, docx, pptx, jpg, png, mp3, &amp;hellip; Handle almost any URI Paste URLs with human-friendly description vimania-uri
Why? One magic power of OS UI is the capability of opening URIs by just double-clicking. As a CLI worker using the mouse does not cut it, unfortunately.
Markdown To deal with markdown a plugin is helpful, e.g. plasticboy&amp;rsquo;s plugin.
It allows to create new files by adding a link [topic](topic) and then jump to it by typing ge while the cursor is on the link.</description>
    </item>
    
    <item>
      <title>Software Architecture 2022</title>
      <link>/software-architecture-2022/</link>
      <pubDate>Fri, 31 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/software-architecture-2022/</guid>
      <description>A refresher in software architecture philosophies with Perseverance, Patience and Python.
This is a high-speed overflight over current approaches with an occasional deep dive.
CRUD, MVC simple concepts and therefore effective communication in dev teams works as expected. Limits known, e.g. modelling complex business domains DDD and Clean Architecture structure of software logic reflects business processes ubiquitous language as common communication ground for developer and business concepts like Aggregate and UnitOfWork provide clear consistency and concurrency model.</description>
    </item>
    
    <item>
      <title>twbm</title>
      <link>/twbm/</link>
      <pubDate>Sat, 24 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/twbm/</guid>
      <description>Bookmarks are a major pillar of any knowledge-management strategy.
Bookmarks are the foundation of the World Wide Web and personal bookmark management should be regarded as a solved problem these days, right?
Truth is, I used to struggle a lot with bookmarks.
My requirements:
I want to own my bookmarks. They reflect a carefully curated list of knowledge and expertise which I have honed over years. I maintain this list and keep it up-to-date.</description>
    </item>
    
    <item>
      <title>Code Snippets</title>
      <link>/code-snippets/</link>
      <pubDate>Sat, 20 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/code-snippets/</guid>
      <description>Using code snippets cross platform in VIM and JetBrains IDE without having to maintain them twice!
As developer we are always striving to improve our (work)flow.
This includes especially tooling, of course.
Here omes taste, capability, technology and craze come together in an unholy mélange of preferences. Your idea of Nirvana surely will be different from mine.
I am using two IDEs:
vim JetBrains PyCharm A challenge while coding is to remember correct syntax, so IDEs provide helpers like code completion, linters and yes, still code snippets (call me old-fashioned).</description>
    </item>
    
    <item>
      <title>Maximal Overlap of Rectangles</title>
      <link>/maximal-overlap-of-rectangles/</link>
      <pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/maximal-overlap-of-rectangles/</guid>
      <description>Find the maximal overlap of rectangles so, that every selected rectangle covers the full width of the overlap area.
A selected rectangle can be larger than the overlap area, but not smaller.
Problem Parameters: a set of rectangles aligned on the x-axis rectanges can have different heigt rectangles show arbitrary overlap Model Parameters $$ i \in [1..N],\ \text{ index: N rectangles }\\ s_i \in R^+,\ \text{ start of rectangle \(i\) }\\ e_i \in R^+,\ \text{ end of rectangle \(i\) }\\ h_i \in R^+,\ \text{ height of rectangle \(i\) }\\ M \in R^+,\ \text{ Big-M constant, upper limit for x }\\ $$</description>
    </item>
    
    <item>
      <title>Scheduling</title>
      <link>/scheduling/</link>
      <pubDate>Wed, 06 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/scheduling/</guid>
      <description>I already analysed several scheduling problems:
Task Scheduling Task Scheduling with limited Resources Job Shop Scheduling Problem Patient Scheduling The class of scheduling problems is interesting and every example provides new insight. Here I am going to look at two problems which can be solved with a very similar and quite common approach: The continuous time model approach.
Problem 1: Machine Scheduling Schedule jobs onto available machines so, that the total processing time (a.</description>
    </item>
    
    <item>
      <title>Inventory Management</title>
      <link>/inventory-management/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>/inventory-management/</guid>
      <description>Find the best order policy to replenish stock levels, i.e. minimize the total cost incurred.
The (Q, R) inventory model is as follows:
If the inventory falls below threshold R, place an order of quantity Q. Lead times: when an order is placed it takes some time to be delivered When inventory becomes zero, additional demand will cause a backlog. Backlogged demand will be fulfilled when replenishments arrive but at a cost.</description>
    </item>
    
    <item>
      <title>Job Shop Scheduling Problem</title>
      <link>/job-shop-scheduling-problem/</link>
      <pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/job-shop-scheduling-problem/</guid>
      <description>The Job Shop Scheduling Problem (JSSP) is an NP-hard problem. 1
The JSSP is defined by a set of jobs that must be executed by a set of machines in a specific order for each job. Each job has a defined execution time for each machine and a defined processing order of machines. Also, each job must use each machine only once. The machines can only execute a job at a time and once started, the machine cannot be interrupted until the completion of the assigned job.</description>
    </item>
    
    <item>
      <title>Resource Constrained Project Success Plan</title>
      <link>/resource-constrained-project-success-plan/</link>
      <pubDate>Sat, 18 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/resource-constrained-project-success-plan/</guid>
      <description>Scheduling tasks in a large project translates to facing a graph optimization challenge:
The Resource-Constrained Project Scheduling Problem is a combinatorial optimization problem that consists of finding a feasible scheduling for a set of \(n\) jobs subject to resource and precedence constraints.
Problem Domain: Network Optimization. Taks are represented by nodes. Dependencies of tasks on predecessors form a directed graph. Every task has got a duration which is represented by the weight of the directed edges of the graph.</description>
    </item>
    
    <item>
      <title>Installing CBC on MacOS</title>
      <link>/installing-cbc-on-macos/</link>
      <pubDate>Wed, 24 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/installing-cbc-on-macos/</guid>
      <description>Update May 2022: Using the coinbrew approach as documented here works now out of the box. Today I needed to install CBC on MacOS and it was not a walk in the park, unfortunately.
Yes, there is a brew package which makes installation trivial. However, this only installs a single-threaded version of CBC. Not good!
One of the greatest selling points of CBC is multithreading. This makes CBC a contender for serious optimization tasks in MIP programming.</description>
    </item>
    
    <item>
      <title>Dispersion</title>
      <link>/dispersion/</link>
      <pubDate>Sun, 21 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/dispersion/</guid>
      <description>Find 10 points out of 50 with maximum distance from each other.1
This problem can modelled as a max-min model where we maximize the smallest distance of 10 points.
Model $$ \max \Delta\\ s.t.\\ \Delta \le d_{i,j} + M(1- x_i x_j), \forall i \lt j \\ \sum_i x_i = k\\ x_i \in {0,1}\\ $$
M is an upper bound on the distances: $$ M = \max_{i\le j} d_{i,j}\\ $$</description>
    </item>
    
    <item>
      <title>The Book of Mormon II</title>
      <link>/the-book-of-mormon-ii/</link>
      <pubDate>Sat, 13 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/the-book-of-mormon-ii/</guid>
      <description>The full version of the problem you can find in part I of the article.
Recap Challenge We want to read the book in a given number of days: 128. We want to read an integer number of chapters each day (there are more chapters than days), and at least 1 chapter each day. The chapters are very non uniform in length (some very short, a few very long, many in between) so we would like to come up with a reading schedule that minimizes the variance of the length of the days readings (read multiple short chapters on the same day, long chapters are the only one read that day).</description>
    </item>
    
    <item>
      <title>The Book of Mormon</title>
      <link>/the-book-of-mormon/</link>
      <pubDate>Sun, 07 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/the-book-of-mormon/</guid>
      <description>The Book of Mormon is a sacred text of the Latter Day Saint movement, which, according to adherents, contains writings of ancient prophets who lived on the American continent from approximately 2200 BC to AD 421.1
Not the easiest matter, so we need a smart reading plan.
Challenge We want to read the book in a given number of days: 128. We want to read an integer number of chapters each day (there are more chapters than days), and at least 1 chapter each day.</description>
    </item>
    
    <item>
      <title>String Puppets</title>
      <link>/string-puppets/</link>
      <pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/string-puppets/</guid>
      <description>import mona1 from &amp;ldquo;./mona1.mp4&amp;rdquo;
I am a fan of the Augsburger Puppenkiste. Puppets are brought to live by pulling strings. If you ever get to Augsburg, do not miss to see a show!
Today a came across an excellent article 1, which creepily reminded me of these happy String Puppets.
I decided to hit two birds with one stone: Learn something about the current state of Deep Fakes and try out Google&amp;rsquo;s Colab environment.</description>
    </item>
    
    <item>
      <title>Numberlink Puzzle</title>
      <link>/numberlink-puzzle/</link>
      <pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/numberlink-puzzle/</guid>
      <description>Problem Connect each two cells with the same numbers by a line. The sections of a line run horizontally or vertically. Each cell must be visited exactly once by a line. Solution The trick is to identify endpoints of numberlinks. They do have only one neighbor with the same value. Cells wich are part of a path must have two neighbors with the same value.
The challenge is now to encode this insight into a Mixed Integer Programming model and fire up a solver.</description>
    </item>
    
    <item>
      <title>Server Sent Events</title>
      <link>/server-sent-events/</link>
      <pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/server-sent-events/</guid>
      <description>If you are looking for realtime features in WEB applciations you often end with Websockets.
Just to be complete I also mention &amp;lsquo;Long/Short polling&amp;rsquo; as a client-side pull option. I regard it as mere workaround to a realtime communication implementation.
As always, requirements are key: If you need bi-directional realtime features with high volume and low latency, Websocket is your choice. If you need to deliver realtime information to many clients, but you can live with the HTTP Request/Response model to trigger actions, Server Sent Events (SSE) are a powerful contender.</description>
    </item>
    
    <item>
      <title>Task Scheduling with limited Resources</title>
      <link>/task-scheduling-with-limited-resources/</link>
      <pubDate>Sun, 24 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/task-scheduling-with-limited-resources/</guid>
      <description>We already looked at a simple scheduling problem: Task Scheduling.
Here we are looking at a more elaborated scheduling example with limited resources for tasks with various durations. We want to get insights by re-engineering the solution of 1 with Pyomo.
Problem We have \(N\) tasks and \(M\) facilities to execute the tasks. Every task has a due date. Tasks require certain resources for execution, e.g. water, electricity, &amp;hellip; Every facility provides a set of resources Only one task per resource can be executed at a given time.</description>
    </item>
    
    <item>
      <title>Task Scheduling</title>
      <link>/task-scheduling/</link>
      <pubDate>Sat, 23 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/task-scheduling/</guid>
      <description>We already looked at a real world scheduling problem: Patient Scheduling.
Important concepts have been touched there. Here we look at additional aspects of this important optimization domain, especially in using Pyomo as modelling environment.
Simple Scheduling Problem Schedule 10 tasks. Each task must be assigned to a single time slot, however, not every time slot is viable. The duration of a task is one timeslot. We want to minimize the number of timeslots used.</description>
    </item>
    
    <item>
      <title>Polyominos, Tetris</title>
      <link>/polyominos-tetris/</link>
      <pubDate>Sun, 17 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/polyominos-tetris/</guid>
      <description>Problem Fill a rectangle with polyominos.
What is a Polyomino?
A plane geometric figure formed by joining one or more equal squares edge to edge. It is a polyform whose cells are squares. It may be regarded as a finite subset of the regular square tiling.
Model Since this puzzle is just another form of tiling challenge we can reuse concepts and ideas from Mondriaan Puzzle, Another Boring Lockdown Day and Patient Scheduling.</description>
    </item>
    
    <item>
      <title>Patient Scheduling</title>
      <link>/patient-scheduling/</link>
      <pubDate>Sat, 09 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/patient-scheduling/</guid>
      <description>How to optimize the scheduling of patients in order to use the necessary infrastructure, i.e. infusion chairs optimally.
Problem Parameters 1: There are \(T = 40\) time slots of 15 minutes We have 23 infusion chairs for patient treatment We have 8 different types of patients Each patient type has a demand (number of patients) and treatment length (expressed in 15 minute slots) No treatments can start during lunch break At most 2 treatments can start in each time slot.</description>
    </item>
    
    <item>
      <title>Square Tiling</title>
      <link>/square-tiling/</link>
      <pubDate>Sat, 02 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/square-tiling/</guid>
      <description>Given an inventory of square tiles, what is the maximum square space we can fill with them?
The picture above consists of the following set of tiles:
length 1 2 3 count 4 3 2 8 out of the 9 given tiles can be used to form the resulting (5x5) square. One (3x3) tile cannot be used. With the given set this is the larges square area we can fill.</description>
    </item>
    
    <item>
      <title>Mondriaan Puzzle</title>
      <link>/mondriaan-puzzle/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/mondriaan-puzzle/</guid>
      <description>Partition an \(n \times n\) square into multiple non-congruent integer-sided rectangles. The rectangles must be non-congruent and the side length must be an integer number. Find the least possible length difference between the largest and smallest used rectangle, i.e. make the rectangles as similar as possible. Every rectangle can only be used once. There is related work covering multiple aspects of the problem and its solution. Here we focus on a Mixed Integer Programming approach.</description>
    </item>
    
    <item>
      <title>Sudoku</title>
      <link>/sudoku/</link>
      <pubDate>Sun, 26 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/sudoku/</guid>
      <description>Wikipedia
a logic-based, combinatorial number-placement puzzle.
Fill a 9×9 grid with digits so that each column, each row, and each of the nine 3×3 subgrids that compose the grid contain all of the digits from 1 to 9.
The puzzle setter provides a partially completed grid, which for a well-posed puzzle has a single solution.
Challenges Understand the problem (easy) Design the index sets (medium) Translate the model into Pyomo (easy) Tooling Pyomo as LP modelling language Optimizer: CBC Python Model Indexing Schema Variables $$ y^m_{i,j;k} = \begin{cases} 1, \ \text{ when cell \((i,j;k)\) contains number \(m\) }\\ 0, \ \text{ else }\\ \end{cases} $$</description>
    </item>
    
    <item>
      <title>Longest Path Journey</title>
      <link>/longest-path-journey/</link>
      <pubDate>Sat, 25 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/longest-path-journey/</guid>
      <description>Normally you would be searching for the shortest path from A to B. At least this is what navigation systems do. But here we want to look at the opposite problem:
What is the longest possible path to get from A to B? Wikipedia
The longest path problem is the problem of finding a simple path of maximum length in a given graph. In contrast to the shortest path problem, which can be solved in polynomial time in graphs without negative-weight cycles, the longest path problem is NP-hard.</description>
    </item>
    
    <item>
      <title>Finding the way with TSP</title>
      <link>/finding-the-way-with-tsp/</link>
      <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/finding-the-way-with-tsp/</guid>
      <description>Reading time is a bug due to size of embedded SVG images.
Travelling Salesman (TSP) Art in Python There is already a lot of existing work on this topic 1, but especially the book from Robert Bosch 2 inspired me to embark on my own journey.
It became an rewarding and entertaining melange of &amp;ldquo;Mathematical Optimization&amp;rdquo; and playful programming while exploring new concepts and building a basic theoretical foundation for one of the most famous problems in mathematical optimization.</description>
    </item>
    
    <item>
      <title>Linear Programming for Dummies 4</title>
      <link>/linear-programming-for-dummies-4/</link>
      <pubDate>Tue, 14 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/linear-programming-for-dummies-4/</guid>
      <description>This is a collection of logic recipies for Mixed Integer Programming. It builds on Part3.
It is based on personal learning experience and focuses on application rather than theory. For a rigorous approach please refer to a textbook.
Logic Recipies All variables here can only take boolean values: \(x_i, y \in{0, 1}\)
Let \(X_i\) stand for the proposition \(x_i=1\), anaolog for \(Y\).
if X then Y $$ x \rightarrow y $$</description>
    </item>
    
    <item>
      <title>Linear Programming for Dummies 3</title>
      <link>/linear-programming-for-dummies-3/</link>
      <pubDate>Mon, 13 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/linear-programming-for-dummies-3/</guid>
      <description>This is a primer on Mixed Integer Programming. It builds on Part2
It is based on personal learning experience and focuses on application rather than theory. For a rigorous approach please refer to a textbook.
Connect decision variable with boolean variable From Part2 it is known that the fundamental technique to link continuous decision variables with indicator/boolean variables is via Big-M/Small-m constraints.
They implement the following logical statement: $$ \delta = 1 \Leftrightarrow x \gt 0 \tag{0} $$</description>
    </item>
    
    <item>
      <title>Linear Programming for Dummies 2</title>
      <link>/linear-programming-for-dummies-2/</link>
      <pubDate>Sun, 12 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/linear-programming-for-dummies-2/</guid>
      <description>This is a primer on Mixed Integer Programming.
It builds on Part1.
It is based on personal learning experience and focuses on application rather than theory. For a rigorous approach please refer to a textbook.
Wikipedia:
An integer programming problem is a mathematical optimization or feasibility program in which some or all of the variables are restricted to be integers. In contrast to linear programming, which can be solved efficiently in the worst case, integer programming problems are in many practical situations (those with bounded variables) NP-hard.</description>
    </item>
    
    <item>
      <title>Optimized Car Rental</title>
      <link>/optimized-car-rental/</link>
      <pubDate>Sat, 11 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/optimized-car-rental/</guid>
      <description>Modelling a car rental company with medium complexity or how to make 120k € per week.1
If you need a primer on Linear Programming: Linear Programming for Dummies 1
Tools employed: Linear programming Python Pyomo as LP modelling language Optimizer: CBC Company model Let&amp;rsquo;s assume a car rental company with 4 locations and business hours from Monday to Saturday.
The rental car demand estimate is:
Cars can be rented for 1, 2 or 3 days and can be returned to either the depot from which rented or another depot at the start of the next morning.</description>
    </item>
    
    <item>
      <title>Linear Programming for Dummies 1</title>
      <link>/linear-programming-for-dummies-1/</link>
      <pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/linear-programming-for-dummies-1/</guid>
      <description>This is a primer on Linear Programming.
It is based on personal learning experience and focuses on application rather than theory. For a rigorous approach please refer to a textbook.
Wikipedia:
Linear programming (LP, also called linear optimization) is a method to achieve the best outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships. Linear programming is a special case of mathematical programming (also known as mathematical optimization).</description>
    </item>
    
    <item>
      <title>BMW I4 and linear dynamic Truchet tilings</title>
      <link>/bmw-i4-and-linear-dynamic-truchet-tilings/</link>
      <pubDate>Sat, 28 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/bmw-i4-and-linear-dynamic-truchet-tilings/</guid>
      <description>Isn&amp;rsquo;t this BMW I4 a beauty? The perfect motivation to start a journey into a little optimization problem:
How to manipulate traditional Truchet tiles so that the resulting tiling resembles the Ultimate Driving Machine?
Truchet tiles are a well known niche in math because they form a foundation for a lot of interesting questions. The basic theory: You have four simple tiles:
Since every tile is 50% black and 50% white a resulting tiling can only resemble a grey area if viewed from afar.</description>
    </item>
    
    <item>
      <title>Munggoggo: A modern message based async agent framework</title>
      <link>/munggoggo-a-modern-message-based-async-agent-framework/</link>
      <pubDate>Sat, 02 Nov 2019 22:12:03 +0000</pubDate>
      
      <guid>/munggoggo-a-modern-message-based-async-agent-framework/</guid>
      <description>An asyncio based agent platform written in Python and based on RabbitMQ.
Agents are isolated processes which can host multiple parallel running behaviours implementing business logic and can be deployed as independent kubernetes pods. Access to the agent mesh is via REST/HTTP, websocket and jsonrpc.
A few lines of code implement a fully fledged agent with a simple behaviour: sending and receiving ping messages to/from other agents.
from mode import Worker from behaviour import Behaviour from core import Core class Agent(Core): class PingBehav(Behaviour): async def setup(self): self.</description>
    </item>
    
    <item>
      <title>Energy Forecast for a full-scale Vehicle Plant</title>
      <link>/energy-forecast-for-a-full-scale-vehicle-plant/</link>
      <pubDate>Sun, 28 May 2017 22:12:03 +0000</pubDate>
      
      <guid>/energy-forecast-for-a-full-scale-vehicle-plant/</guid>
      <description>Energy Forecast for a full scale Vehicle Plant Energy forecasting is based on time series analysis. There are many techniques for analysing and forecasting time series, e.g. ARIMA, linear regression and deep learning. To tackle the challenge at hand a linear regression will be the benchmark model aganst which deep learning models will be tested. In particular a multi layer perceptron (MLP) and recurrent neural network (RNN), i.e. Long-Short Time Memory (LSTM) model will be applied.</description>
    </item>
    
    <item>
      <title>Fishy Affine Transformation</title>
      <link>/fishy-affine-transformation/</link>
      <pubDate>Mon, 13 Mar 2017 22:12:03 +0000</pubDate>
      
      <guid>/fishy-affine-transformation/</guid>
      <description>Fishy Affine Transformation While working on the kaggle competition https://www.kaggle.com/c/the-nature-conservancy-fisheries-monitoring I hit the point when I wanted to align fish based on an annotation at the fish&amp;rsquo;s head and tail, so that the fish is centered in the image, always in the same orientation and distracting picture information is minimized. This required:
finding the fish (thanks Nathaniel Shimoni for annotating) centering rotatating cropping Mathematically the challenge is to find the associated Affine Transformation.</description>
    </item>
    
    <item>
      <title>Machine Learning Journey</title>
      <link>/machine-learning-journey/</link>
      <pubDate>Mon, 23 Jan 2017 22:12:03 +0000</pubDate>
      
      <guid>/machine-learning-journey/</guid>
      <description>Cheat Sheet General Explanations: embeddings: a way to translate multidimensional input into fixed length log dimensional representations: lookup the integer index of the object and look it up in a corresponding matrix wich holds the low-dim representation. If no embeddings are used, the input has to be one-hot-encoded wich yields huge matrices KFold Cross Validation: The purpose of cross-validation is model checking, not model building. Once we have used cross-validation to select the better performing model, we train that model (whether it be the linear regression or the neural network) on all the data.</description>
    </item>
    
  </channel>
</rss>
