{"componentChunkName":"component---src-templates-blog-post-js","path":"/vimania-uri/","result":{"data":{"site":{"siteMetadata":{"title":"sysid blog","siteUrl":"https://sysid.github.io","social":{"twitter":""}}},"mdx":{"id":"1d4b7c63-8bdc-569b-937c-f4fdb7180162","excerpt":"Like to double-click links in order to \"open\" them? Here is the keyboard-based VIM version. vimania-uri Key Features Open arbitrary URIs in text files, html, docx, pptx, jpg, png, mp3, ... Save URIâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"vimania-uri\",\n  \"date\": \"2022-09-01\",\n  \"description\": \"Use arbitrary URI's like double-clicking them in your OS, but with VIM.\",\n  \"tags\": [\"python\", \"work\", \"vim\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Like to double-click links in order to \\u201Copen\\u201D them? Here is the keyboard-based VIM version.\")), mdx(\"h4\", null, mdx(\"a\", _extends({\n    parentName: \"h4\"\n  }, {\n    \"href\": \"https://github.com/sysid/vimania-uri\"\n  }), \"vimania-uri\")), mdx(\"h2\", null, \"Key Features\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Open arbitrary URIs in text files, html, docx, pptx, jpg, png, mp3, \\u2026\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Save URI seamless in bookmark manager \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/sysid/twbm\"\n  }), \"twbm\"), \" for seamless CLI management\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Handles almost any kind of URI\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Paste URLs with human-friendly description\")), mdx(\"h2\", null, \"Why?\"), mdx(\"p\", null, \"One magic power of an OS UI is the capability of opening most URIs by just double-clicking them.\\nAs a CLI worker using the mouse does not cut it, unfortunately.\"), mdx(\"h3\", null, \"Markdown\"), mdx(\"p\", null, \"Certainly I use Markdown a lot and after a few burns I settled with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/plasticboy/vim-markdown\"\n  }), \"plasticboy\\u2019s plugin\"), \".\\nIt allows me to create new files by just adding a link \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"[topic](topic)\"), \" and then jump to it by typing \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"ge\"), \" while the cursor is on the link.\\nThis opens the markdwown file and I am ready to go. Very convenient, even no need for the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \".md\"), \"-suffix in the link\\nspecification.\"), mdx(\"p\", null, \"Hmmm, one \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"has\"), \" to leave the suffix out in order to work. Ok, just a little thing to remember, right? No problem.\"), mdx(\"h3\", null, \"URI Handling\"), mdx(\"p\", null, \"I used vim\\u2019s builtin \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"netrw\"), \" to open files via the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"gx\"), \"-mapping. Again, add a link \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"[topic](file.ext)\"), \"\\nand \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"netrw\"), \" uses the OS\\u2019s native \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"open\"), \" command to handle the file link. This means it can handle URLs, file paths, Microsoft\\nOffice Documents, etc\\u2026\"), mdx(\"p\", null, \"A true productivity booster which mimics the behavior of just double-clicking a file in a GUI\\nfile-manager. Only, this time one \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"must not\"), \" miss the the suffix in the filename.\"), mdx(\"p\", null, \"There should be only ONE way to do things.\"), mdx(\"h3\", null, \"All in One\"), mdx(\"p\", null, \"I am only aware of one plugin which tries to be feature complete: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/chmp/mdnav\"\n  }), \"mdnav\"), \".\\nUnfortunattely this project is not maintained any more, so I forked it and started to integrate it with\\na CLI bookmark manager.\"), mdx(\"h2\", null, \"How ?\"), mdx(\"h3\", null, \"Simple user interface\"), mdx(\"p\", null, \"Position cursor anywhere on URI and just say \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"go\"), \".\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-text\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"go (open URL, directories, files, ...)\"))), mdx(\"br\", null), \"Paste links with human-readable link description instead of machine URL text:\", mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-text\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"<leader>vl (paste link)\"))), mdx(\"h3\", null, \"Optional: Bookmark Manager Integration\"), mdx(\"p\", null, \"Save URI in bookmark manager: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/sysid/twbm\"\n  }), \"twbm\"), \".\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-text\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"goo (open and save to bookmark DB)\"))), mdx(\"br\", null), \"To remove an URI from the bookmark database the `dd` VIM command has been hooked into, so that whenever an URI gets `dd`-ed, it also gets deleted from the bookmark database.\", mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-text\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"dd (delete URI containing line from markdown and DB)\"))), mdx(\"h2\", null, \"Summary\"), mdx(\"p\", null, \"This plugin hanles all URI use-cases in VIM text files transparently as you would expect it from your OS UI. No need to\\nmemorize several key shortcuts or commands. An additional benefit is the bookmark manager integration, which allow to\\nopen your URIs from the command line. A true productivity booster.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"vimania-uri","date":"September 01, 2022","description":"Use arbitrary URI's like double-clicking them in your OS, but with VIM.","tags":["python","work","vim"]},"fields":{"slug":"/vimania-uri/","readingTime":{"minutes":2.42}}}},"pageContext":{"slug":"/vimania-uri/","previous":{"fields":{"slug":"/battery/"},"frontmatter":{"title":"Modelling Battery Charging","tags":["python","optimization","pyomo"]}},"next":null}},"staticQueryHashes":["2841359383","4035129850"]}