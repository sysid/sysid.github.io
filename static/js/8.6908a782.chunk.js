(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{66:function(n,s,a){"use strict";a.r(s),a.d(s,"readingTime",function(){return c}),a.d(s,"default",function(){return r}),a.d(s,"tableOfContents",function(){return u}),a.d(s,"frontMatter",function(){return d});var e=a(14),t=(a(0),a(20)),o=a(67),p=a.n(o),c={text:"3 min read",minutes:2.2,time:132e3,words:440},i={},l="wrapper";function r(n){var s=n.components,a=Object(e.a)(n,["components"]);return Object(t.b)(l,Object.assign({},i,a,{components:s,mdxType:"MDXLayout"}),Object(t.b)("div",{className:p.a.Document},Object(t.b)("p",null,"An asyncio based agent platform written in Python and based on RabbitMQ. "),Object(t.b)("p",null,"Agents are isolated processes which can host multiple parallel running behaviours implementing business\nlogic and can be deployed as independent kubernetes pods. Access to the agent mesh is via\nREST/HTTP, websocket and jsonrpc."),Object(t.b)("p",null,"A few lines of code implement a fully fledged agent with a simple behaviour: sending and\nreceiving ping messages to/from other agents."),Object(t.b)("pre",null,Object(t.b)("code",Object.assign({parentName:"pre"},{className:"language-python","data-language":"python","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token keyword">from</span> mode <span class="token keyword">import</span> Worker\n<span class="token keyword">from</span> behaviour <span class="token keyword">import</span> Behaviour\n<span class="token keyword">from</span> core <span class="token keyword">import</span> Core\n\n\n<span class="token keyword">class</span> <span class="token class-name">Agent</span><span class="token punctuation">(</span>Core<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">class</span> <span class="token class-name">PingBehav</span><span class="token punctuation">(</span>Behaviour<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">setup</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n            self<span class="token punctuation">.</span>counter <span class="token operator">=</span> <span class="token number">0</span>\n\n        <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n            self<span class="token punctuation">.</span>counter <span class="token operator">+=</span> <span class="token number">1</span>\n            msg <span class="token operator">=</span> <span class="token keyword">await</span> self<span class="token punctuation">.</span>receive<span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token keyword">if</span> msg<span class="token punctuation">:</span>\n                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">: Message received: </span><span class="token interpolation"><span class="token punctuation">{</span>msg<span class="token punctuation">.</span>body<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>\n            <span class="token keyword">await</span> self<span class="token punctuation">.</span>publish<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>counter<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">\'ping\'</span><span class="token punctuation">)</span>\n            <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.9</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">setup</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>\n        <span class="token triple-quoted-string string">""" Register behaviour and subscribe to \'ping\' topic """</span>\n        <span class="token keyword">await</span> self<span class="token punctuation">.</span>add_runtime_dependency<span class="token punctuation">(</span>self<span class="token punctuation">.</span>PingBehav<span class="token punctuation">(</span>self<span class="token punctuation">,</span> binding_keys<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">\'ping\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n\n<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">\'__main__\'</span><span class="token punctuation">:</span>\n    Worker<span class="token punctuation">(</span>Agent<span class="token punctuation">(</span>identity<span class="token operator">=</span><span class="token string">\'AgentIdentity\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loglevel<span class="token operator">=</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>execute_from_commandline<span class="token punctuation">(</span><span class="token punctuation">)</span>\n'}}))),Object(t.b)("p",null,"Documentation: ",Object(t.b)("a",Object.assign({parentName:"p"},{href:"https://munggoggo.readthedocs.io/en/latest/"}),"https://munggoggo.readthedocs.io/en/latest/"),Object(t.b)("br",{parentName:"p"}),"\n","Github: ",Object(t.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/sysid/munggoggo"}),"https://github.com/sysid/munggoggo")),Object(t.b)("h2",{id:"why"},"Why"),Object(t.b)("p",null,"The physical world forms a massive parallel system.  "),Object(t.b)("p",null,"The metaphor of software agents communicating via messages helps to model this realty.\nDevices like cars, buildings, etc. can be interpreted as independently acting\nagents communicating via message protocols like AMQP. "),Object(t.b)("p",null,"Today\u2019s software technology has evolved far enough to model this reality without access to supercomputers or\nhighly specialized programming paradigms. Agents running async business logic are a suitable fit and\ncan be implemented with various prevalent technology stacks."),Object(t.b)("h2",{id:"technology-stack-choice"},"Technology Stack Choice"),Object(t.b)("p",null,"Requirements for our tech stack, driven by business reality:"),Object(t.b)("ol",null,Object(t.b)("li",{parentName:"ol"},"very fast turnover and implementation cycles (experiment, learn, extract useful part, repeat\u2026)"),Object(t.b)("li",{parentName:"ol"},"focus on data driven models and algorithms, based on IoT data streams (e.g. vehicles)"),Object(t.b)("li",{parentName:"ol"},"loose coupling and independent entity modelling "),Object(t.b)("li",{parentName:"ol"},"cloud first (of course\u2026)"),Object(t.b)("li",{parentName:"ol"},"standards based and seamless systems integration"),Object(t.b)("li",{parentName:"ol"},"scalability")),Object(t.b)("p",null,"For us this translated in:"),Object(t.b)("ol",null,Object(t.b)("li",{parentName:"ol"},"Python as programming language wich allows quick development cycles and has got a well established footprint\nin data science and data computing"),Object(t.b)("li",{parentName:"ol"},"Messaging backend based on AMQP (RabbitMQ) which supports streamning programming while simultaniously allows\nsophisticated routing and communication patterns"),Object(t.b)("li",{parentName:"ol"},"Async programming paradigm in order to fully capitalize on stream processing"),Object(t.b)("li",{parentName:"ol"},"Agent metaphor for independent computing units exposing one ore more behaviours")),Object(t.b)("h2",{id:"bringing-it-together"},"Bringing it together"),Object(t.b)("p",null,"Combining these ideas, reviewing existing solutions and including a few original ideas\neventually led to this prototype implementation of a behavioural agent software framework based on async python, RabbitMQ and\nASGI as web programming model.  "),Object(t.b)("p",null,"It is a personal PoC at the moment rather than production ready software and its potential is to be verified."),Object(t.b)("p",null,"In any case it demonstrates some interesting ideas to tackle the described problem domain and combines some of the latest\npython programming paradigms.")))}r.isMDXComponent=!0;var u=function(){arguments.length>0&&void 0!==arguments[0]&&arguments[0];return[{id:"why",level:2,title:"Why",children:[]},{id:"technology-stack-choice",level:2,title:"Technology Stack Choice",children:[]},{id:"bringing-it-together",level:2,title:"Bringing it together",children:[]}]},d={}},67:function(n,s,a){n.exports={Document:"document_Document__NswW2"}}}]);
//# sourceMappingURL=8.6908a782.chunk.js.map